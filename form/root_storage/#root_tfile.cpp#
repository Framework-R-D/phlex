// Copyright (C) 2025 ...

#include "root_tfile.hpp"

#include "TFile.h"

namespace form::detail::experimental {
ROOT_TFileImp::ROOT_TFileImp(const std::string& name, char mode) :
  m_name(name), m_mode(mode), m_file(nullptr)
{
  if (m_mode == 'c' || m_mode == 'r' || m_mode == 'o') {
    m_file.reset([  7%] Building CXX object form/root_storage/CMakeFiles/root_storage.dir/root_tfile.o
/exp/dune/app/users/barnali/phlex/form/root_storage/root_tfile.cpp: In constructor 'form::detail::experimental::ROOT_TFileImp::ROOT_TFileImp(const std::string&, char)':
/exp/dune/app/users/barnali/phlex/form/root_storage/root_tfile.cpp:12:17: error: no matching function for call to 'std::shared_ptr<form::detail::experimental::TFile>::reset(TFile*)'
   12 |     m_file.reset(::TFile::Open(name.c_str(), "RECREATE"));
      |     ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /cvmfs/larsoft.opensciencegrid.org/spack-packages/opt/spack/linux-almalinux9-x86_64_v2/gcc-11.4.1/gcc-12.2.0-ojrjuib44dbyxvxgvwugxw77gsrkv3yc/bin/../lib/gcc/x86_64-pc-linux-gnu/12.2.0/../../../../include/c++/12.2.0/bits/shared_ptr.h:53,
                 from /cvmfs/larsoft.opensciencegrid.org/spack-packages/opt/spack/linux-almalinux9-x86_64_v2/gcTFile::Open(name.c_str(), "RECREATE"));
  } else {
    m_file.reset(::TFile::Open(name.c_str(), "READ"));
  }
}

//Trivial destructor is sufficient because all members managed by the stack.
//Writing it here lets us move the dependence on the TFile implementation out of the header.
ROOT_TFileImp::~ROOT_TFileImp() {}

const std::string& ROOT_TFileImp::name() { return m_name; }

std::shared_ptr<TFile> ROOT_TFileImp::getTFile() { return m_file; }

} //namespace form::detail::experimental
