// Copyright (C) 2025 ...

#ifndef __ROOT_TFILE_H__
#define __ROOT_TFILE_H__

#include "storage/istorage.hpp"

#include <memory>
#include <string>

class TFile;

[  7%] Building CXX object form/root_storage/CMakeFiles/root_storage.dir/root_tfile.o
/exp/dune/app/users/barnali/phlex/form/root_storage/root_tfile.cpp: In constructor 'form::detail::experimental::ROOT_TFileImp::ROOT_TFileImp(const std::string&, char)':
/exp/dune/app/users/barnali/phlex/form/root_storage/root_tfile.cpp:12:25: error: incomplete type 'form::detail::experimental::TFile' used in nested name specifier
   12 |     m_file.reset(TFile::Open(name.c_str(), "RECREATE"));
      |                         ^~~~
/exp/dune/app/users/barnali/phlex/form/root_storage/root_tfile.cpp:14:25: error: incomplete type 'form::detail::experimental::TFile' used in nested name specifier
   14 |     m_file.reset(TFile::Open(name.c_str(), "READ"));
      |                         ^~~~
make[2]: *** [form/root_storage/CMakeFiles/root_storage.dir/build.make:76: form/root_storage/CMakeFiles/root_storage.dir/root_tfile.o] Error 1
make[1]: *** [CMakeFiles/Makefile2:310: form/root_storage/CMakeFiles/root_storage.dir/all] Error 2
make: *** [Makef
  class ROOT_TFileImp : public IStorage_File {
  public:
    ROOT_TFileImp(const std::string& name, char mode);
    ~ROOT_TFileImp();
    
    const std::string& name();
    std::shared_ptr<TFile> getTFile();
    
  private:
    std::string m_name;
    char m_mode;
    
    std::shared_ptr<TFile> m_file;
  };
}

#endif
